"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const business_controller_1 = __importDefault(require("./business.controller"));
const multer_1 = __importDefault(require("multer"));
const validateSchemaBusiness_1 = __importDefault(require("../../shared/middlewares/form-data/validateSchemaBusiness"));
const business_schema_1 = require("./business.schema");
const validateSchema_1 = __importDefault(require("../../shared/middlewares/validateSchema"));
const validateToken_1 = __importDefault(require("../../shared/middlewares/validateToken"));
const getSecretKey_1 = require("../../shared/security/getSecretKey");
const BusinessRoute = (0, express_1.Router)();
const business = new business_controller_1.default();
const storage = multer_1.default.memoryStorage();
const upload = (0, multer_1.default)({ storage: storage });
BusinessRoute.get('/business', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (req, res) => business.listBusiness(req, res));
BusinessRoute.get('/business/product/:id', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (req, res) => business.listBusinessByProductId(req, res));
BusinessRoute.get('/business/:id', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (req, res) => business.searchBusinessById(req, res));
BusinessRoute.get('/business/code/:code', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (req, res) => business.searchBusinessByCode(req, res));
BusinessRoute.get('/business/print/:id', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (req, res) => business.printCodeBusiness(req, res));
BusinessRoute.get('/business/download/:id', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (req, res) => business.downloadCodeBusiness(req, res));
BusinessRoute.get('/business/download/bill/:id', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (req, res) => business.downloadBillBusiness(req, res));
BusinessRoute.post('/business', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), upload.single('bill'), (0, validateSchemaBusiness_1.default)(business_schema_1.createBusiness), (req, res) => business.createBusiness(req, res));
BusinessRoute.put('/business/:id', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), upload.single('bill'), (0, validateSchema_1.default)(business_schema_1.updateBill), (req, res) => business.updateBill(req, res));
BusinessRoute.patch('/business/stock/id/:id', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (0, validateSchema_1.default)(business_schema_1.updateStockById), (req, res) => business.updateStockById(req, res));
BusinessRoute.patch('/business/stock', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (0, validateSchema_1.default)(business_schema_1.updateStockByCode), (req, res) => business.updateStockByCode(req, res));
BusinessRoute.patch('/business/position/:id', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (0, validateSchema_1.default)(business_schema_1.modifyPosition), (req, res) => business.modifyPosition(req, res));
BusinessRoute.delete('/business/:id', (0, validateToken_1.default)(getSecretKey_1.getSecretKey), (req, res) => business.completeBusiness(req, res));
exports.default = BusinessRoute;
